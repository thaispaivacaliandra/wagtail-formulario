# models.py
from django.db import models
from django.core.exceptions import ValidationError
from wagtail.models import Page
from wagtail.fields import RichTextField
from wagtail.admin.panels import FieldPanel, InlinePanel, MultiFieldPanel
from wagtail.contrib.forms.models import AbstractEmailForm, AbstractFormField
from modelcluster.fields import ParentalKey


class FormularioField(AbstractFormField):
    """
    Modelo para campos do formul√°rio com tipos personalizados
    """
    FIELD_TYPES = [
        ('singleline', 'Texto simples'),
        ('multiline', 'Texto longo (textarea)'),
        ('email', 'Email'),
        ('number', 'N√∫mero'),
        ('url', 'URL'),
        ('checkbox', 'Checkbox'),
        ('checkboxes', 'Checkboxes m√∫ltiplos'),
        ('dropdown', 'Lista suspensa'),
        ('multiselect', 'Sele√ß√£o m√∫ltipla'),
        ('radio', 'Bot√µes de op√ß√£o'),
        ('date', 'Data'),
        ('datetime', 'Data e hora'),
        ('hidden', 'Campo oculto'),
        ('cpf', 'CPF'),
        ('telefone', 'Telefone'),
        ('senha', 'Senha'),
    ]

    page = ParentalKey('FormularioPage', on_delete=models.CASCADE, related_name='form_fields')
    field_type = models.CharField(
        verbose_name='Tipo do campo',
        max_length=16,
        choices=FIELD_TYPES,
        default='singleline'
    )
    choices = models.TextField(
        verbose_name="Op√ß√µes",
        blank=True,
        help_text='Necess√°rio para dropdown, checkboxes, etc. Uma op√ß√£o por linha.'
    )
    default_value = models.CharField(
        verbose_name="Valor padr√£o",
        max_length=255,
        blank=True,
        help_text='Valor pr√©-preenchido (opcional)'
    )
    placeholder = models.CharField(
        verbose_name="Placeholder",
        max_length=255,
        blank=True,
        help_text='Texto de exemplo no campo'
    )
    help_text_field = models.CharField(
        verbose_name="Texto de ajuda",
        max_length=255,
        blank=True,
        help_text='Texto explicativo abaixo do campo'
    )
    section_title = models.CharField(
        verbose_name="T√≠tulo da se√ß√£o",
        max_length=255,
        blank=True,
        help_text='T√≠tulo grande acima da pergunta'
    )
    ordem = models.PositiveIntegerField(
        verbose_name="Ordem",
        default=0,
        help_text='Ordem de exibi√ß√£o do campo'
    )

    panels = [
        FieldPanel('label'),
        FieldPanel('field_type'),
        FieldPanel('required'),
        FieldPanel('section_title'),
        FieldPanel('help_text_field'),
        FieldPanel('placeholder'),
        FieldPanel('choices', 
                  help_text='üìã APENAS para: Dropdown, Radio, Checkboxes. Uma op√ß√£o por linha.'),
        FieldPanel('default_value', 
                  help_text='üö´ N√ÉO usar para: Checkboxes m√∫ltiplos'),
        FieldPanel('ordem'),
    ]

    def get_choices_list(self):
        """
        Retorna as op√ß√µes como uma lista
        """
        if not self.choices:
            return []
        
        choices = []
        for line in self.choices.split('\n'):
            line = line.strip()
            if line:
                choices.append(line)
        return choices

    class Meta:
        ordering = ['ordem', 'id']

    def clean(self):
        super().clean()
        if self.field_type in ['dropdown', 'multiselect', 'checkboxes', 'radio']:
            if not self.choices:
                raise ValidationError({
                    'choices': 'Este tipo de campo requer op√ß√µes.'
                })
        
        # Limpar valor padr√£o para checkboxes m√∫ltiplos
        if self.field_type == 'checkboxes':
            self.default_value = ''


class FormularioPage(AbstractEmailForm):
    """
    P√°gina principal do formul√°rio
    """
    intro = RichTextField(
        verbose_name="Introdu√ß√£o",
        blank=True,
        help_text='Texto de introdu√ß√£o do formul√°rio'
    )
    thank_you_text = RichTextField(
        verbose_name="Texto de agradecimento",
        blank=True,
        help_text='Texto exibido ap√≥s envio do formul√°rio'
    )
    
    # Configura√ß√µes visuais
    background_color = models.CharField(
        verbose_name="Cor de fundo",
        max_length=7,
        default="#ffffff",
        help_text='C√≥digo hexadecimal da cor (ex: #ffffff)'
    )
    primary_color = models.CharField(
        verbose_name="Cor prim√°ria",
        max_length=7,
        default="#2A5E2C",
        help_text='Cor dos bot√µes e elementos principais'
    )
    show_progress_bar = models.BooleanField(
        verbose_name="Mostrar barra de progresso",
        default=True
    )
    form_title = models.CharField(
        verbose_name="T√≠tulo do formul√°rio",
        max_length=255,
        default="Formul√°rio de Inscri√ß√£o"
    )
    form_subtitle = models.CharField(
        verbose_name="Subt√≠tulo",
        max_length=255,
        blank=True
    )
    logo = models.ForeignKey(
        'wagtailimages.Image',
        null=True,
        blank=True,
        on_delete=models.SET_NULL,
        related_name='+',
        verbose_name='Logo/Imagem de boas-vindas'
    )

    background_image = models.ForeignKey(
        'wagtailimages.Image',
        null=True,
        blank=True,
        on_delete=models.SET_NULL,
        related_name='+',
        verbose_name='Imagem de fundo',
        help_text='Imagem de fundo para o formul√°rio'
    )

    thank_you_image = models.ForeignKey(
        'wagtailimages.Image',
        null=True,
        blank=True,
        on_delete=models.SET_NULL,
        related_name='+',
        verbose_name='Imagem de agradecimento'
    )

    content_panels = AbstractEmailForm.content_panels + [
        MultiFieldPanel([
            FieldPanel('form_title'),
            FieldPanel('form_subtitle'),
            FieldPanel('logo'),
        ], "Tela de boas-vindas"),
        
        FieldPanel('intro'),
        
        InlinePanel('form_fields', label="Campos do formul√°rio"),
        
        MultiFieldPanel([
            FieldPanel('thank_you_text'),
            FieldPanel('thank_you_image'),
        ], "Tela de agradecimento"),
        
        MultiFieldPanel([
            FieldPanel('background_image'),
            FieldPanel('background_color'),
            FieldPanel('primary_color'),
            FieldPanel('show_progress_bar'),
        ], "Apar√™ncia"),
        
        MultiFieldPanel([
            FieldPanel('to_address', classname="col6"),
            FieldPanel('from_address', classname="col6"),
            FieldPanel('subject'),
        ], "Configura√ß√µes de email"),
    ]

    def get_form_fields(self):
        """
        Retorna os campos do formul√°rio ordenados
        """
        return self.form_fields.all().order_by('ordem', 'id')

    def process_form_submission(self, form):
        """
        Override para salvar dados estruturados
        """
        # Chamar o m√©todo pai para enviar email
        result = super().process_form_submission(form)
        
        # Extrair dados espec√≠ficos
        form_data = form.cleaned_data
        nome_completo = form_data.get('nome_completo', '')
        email = form_data.get('email', '')
        cpf = form_data.get('cpf', '')
        telefone = form_data.get('telefone', '') or form_data.get('celular', '')
        
        # Salvar submiss√£o estruturada
        FormularioSubmission.objects.create(
            page=self,
            form_data=form_data,
            nome_completo=nome_completo,
            email=email,
            cpf=cpf,
            telefone=telefone,
            user_ip=self.get_client_ip(),
            user_agent=self.get_user_agent(),
        )
        
        return result
    
    def get_client_ip(self):
        """Pega o IP do usu√°rio da requisi√ß√£o atual"""
        # Isso ser√° definido no contexto da view
        return getattr(self, '_current_request_ip', None)
    
    def get_user_agent(self):
        """Pega o User Agent da requisi√ß√£o atual"""
        return getattr(self, '_current_request_user_agent', '')

    def serve(self, request, *args, **kwargs):
        """
        Override para capturar dados da requisi√ß√£o
        """
        # Guardar dados da requisi√ß√£o para usar no process_form_submission
        self._current_request_ip = self._get_client_ip(request)
        self._current_request_user_agent = request.META.get('HTTP_USER_AGENT', '')
        
        return super().serve(request, *args, **kwargs)
    
    def _get_client_ip(self, request):
        """Extrai o IP real do cliente"""
        x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
        if x_forwarded_for:
            ip = x_forwarded_for.split(',')[0]
        else:
            ip = request.META.get('REMOTE_ADDR')
        return ip
    
        
        """
        Gera a classe do formul√°rio dinamicamente baseada nos campos
        """
        from django import forms
        from django.core.validators import validate_email
        import re

        form_class = super().get_form_class()
        
        # Adicionar validadores customizados
        def validate_cpf(value):
            # Remove caracteres n√£o num√©ricos
            cpf = re.sub(r'[^0-9]', '', value)
            if len(cpf) != 11 or cpf == cpf[0] * 11:
                raise forms.ValidationError('CPF inv√°lido')
            
            # Valida√ß√£o dos d√≠gitos verificadores
            def calculate_digit(cpf, weight):
                sum_result = sum(int(cpf[i]) * weight[i] for i in range(len(weight)))
                remainder = sum_result % 11
                return 0 if remainder < 2 else 11 - remainder

            if int(cpf[9]) != calculate_digit(cpf, list(range(10, 1, -1))):
                raise forms.ValidationError('CPF inv√°lido')
            if int(cpf[10]) != calculate_digit(cpf, list(range(11, 1, -1))):
                raise forms.ValidationError('CPF inv√°lido')

        def validate_telefone(value):
            # Remove caracteres n√£o num√©ricos
            phone = re.sub(r'[^0-9]', '', value)
            if len(phone) not in [10, 11]:
                raise forms.ValidationError('Telefone deve ter 10 ou 11 d√≠gitos')

        # Aplicar validadores aos campos
        for field in form_class.base_fields.values():
            if hasattr(field, 'clean_name'):
                field_obj = self.form_fields.filter(clean_name=field.clean_name).first()
                if field_obj:
                    if field_obj.field_type == 'cpf':
                        field.validators.append(validate_cpf)
                    elif field_obj.field_type == 'telefone':
                        field.validators.append(validate_telefone)

        return form_class

    class Meta:
        verbose_name = "Formul√°rio Personalizado"
        verbose_name_plural = "Formul√°rios Personalizados"


# Para salvar as submiss√µes com dados estruturados
class FormularioSubmission(models.Model):
    """
    Modelo para armazenar submiss√µes com dados estruturados
    """
    page = models.ForeignKey(FormularioPage, on_delete=models.CASCADE)
    form_data = models.JSONField(verbose_name="Dados do formul√°rio")
    submit_time = models.DateTimeField(auto_now_add=True)
    user_ip = models.GenericIPAddressField(verbose_name="IP do usu√°rio", null=True, blank=True)
    user_agent = models.TextField(verbose_name="User Agent", blank=True)
    
    # Campos espec√≠ficos que voc√™ pode querer indexar
    nome_completo = models.CharField(max_length=255, blank=True)
    email = models.EmailField(blank=True)
    cpf = models.CharField(max_length=14, blank=True)
    telefone = models.CharField(max_length=20, blank=True)
    
    class Meta:
        verbose_name = "Submiss√£o do Formul√°rio"
        verbose_name_plural = "Submiss√µes do Formul√°rio"
        ordering = ['-submit_time']

    def __str__(self):
        return f"{self.nome_completo or 'Sem nome'} - {self.submit_time.strftime('%d/%m/%Y %H:%M')}"